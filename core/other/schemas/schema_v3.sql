---------==================----------------
-------- Core Tables -- V2 ----------------
-------- Some tables are missing-----------
-------- The tables will be created--------
-------- in later iteration----------------
-------------------------------------------

--- Extensions to Add ---
CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- Custom Types --
DROP TYPE IF EXISTS token_status       CASCADE;
DROP TYPE IF EXISTS order_status       CASCADE;
DROP TYPE IF EXISTS transaction_status CASCADE;
DROP TYPE IF EXISTS auditing_status    CASCADE;
DROP TYPE IF EXISTS email_status       CASCADE;
DROP TYPE IF EXISTS email_kind         CASCADE;

CREATE TYPE token_status       AS ENUM ('PENDING', 'ACTIVE', 'PROCESSING', 'FAILED');
CREATE TYPE order_status       AS ENUM ('PENDING_PAYMENT','PAID','PAYMENT_FAILED','CANCELLED','EXPIRED');
CREATE TYPE transaction_status AS ENUM ('PENDING','SUCCESSFUL','FAILED');
CREATE TYPE auditing_status    AS ENUM ('SUCCESSFUL','FAILED','ERROR', 'WARNING');
CREATE TYPE email_status       AS ENUM ('QUEUED','SENT', 'SENDING', 'FAILED');
CREATE TYPE email_kind         AS ENUM ('ORDER_CONFIRMATION', 'ORDER_CANCEL_CONFIRMATION', 'PAYMENT_CONFIRMATION', 'PAYMENT_FAILED_CONFIRMATION', 'ACCOUNT_UPDATE', 'PASSWORD_CHANGE')

-- ====================================
--         Clear all tables
-- ====================================
DROP TABLE IF EXISTS customers_address CASCADE;
DROP TABLE IF EXISTS customers CASCADE;
DROP TABLE IF EXISTS customer_payment_methods CASCADE;
DROP TABLE IF EXISTS cart CASCADE;
DROP TABLE IF EXISTS cart_item CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS product_category CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS order_item CASCADE;
DROP TABLE IF EXISTS transactions CASCADE;
DROP TABLE IF EXISTS auditing CASCADE;

-- =====================================
-- Customers & Addresses & PaymentMethod
-- =====================================

-- customers: UUID PK generated by Hibernate (no DB default)
create table customers (
    customer_id UUID PRIMARY KEY,
    phone_number varchar(20)  NOT NULL UNIQUE,
    email varchar(255)  NOT NULL UNIQUE,
    username varchar(50)  NOT NULL UNIQUE,
    password_hash varchar(255)  NOT NULL,
    name varchar(100),
    surname varchar(100),
    created_at timestamptz NOT NULL DEFAULT NOW(),
    updated_at timestamptz NOT NULL DEFAULT NOW(),
    is_subscribed boolean NOT NULL DEFAULT FALSE
);

-- customers_address: BIGINT PK generated by Hibernate (no DB default)
create table customers_address (
    addr_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id UUID NOT NULL REFERENCES customers(customer_id) ON DELETE CASCADE,
    country varchar(150) NOT NULL,
    street varchar(100) NOT NULL,
    city varchar(75) NOT NULL,
    postal_code varchar(50) NOT NULL,
    created_at timestamptz NOT NULL DEFAULT NOW(),
    updated_at timestamptz NOT NULL DEFAULT NOW(),
    is_default boolean NOT NULL DEFAULT TRUE
);

-- Force one default per customer
CREATE UNIQUE INDEX uq_default_addr_per_customer
    ON customers_address(customer_id)
    WHERE is_default = TRUE;

-- customer_payment_methods: UUID PK generated by Hibernate (no DB default)
create table customer_payment_methods(
    customer_payment_id UUID PRIMARY KEY,
    customer_id UUID NOT NULL REFERENCES customers(customer_id) ON DELETE CASCADE,
    provider varchar(50) NOT NULL,
    provider_payment_token TEXT,
    brand varchar(25) NOT NULL,
    last_4 char(4) NOT NULL,
    year_exp SMALLINT NOT NULL,
    month_exp SMALLINT NOT NULL CHECK (month_exp BETWEEN 1 AND 12),
    created_at timestamptz NOT NULL DEFAULT NOW(),
    updated_at timestamptz DEFAULT NOW(),
    token_status token_status NOT NULL DEFAULT 'PENDING',
    row_version BIGINT NOT NULL DEFAULT 0,
    is_default boolean NOT NULL DEFAULT TRUE,
    CONSTRAINT chk_cpm_last4_digits CHECK(last_4 ~ '^[0-9]{4}$'),
    CONSTRAINT chk_cpm_year_exp_reasonable CHECK(year_exp BETWEEN 2000 AND 2100)
);

-- Force one default per customer
CREATE UNIQUE INDEX uq_default_payment_per_customer
    ON customer_payment_methods(customer_id)
    WHERE is_default = TRUE;

--=============================
-- Categories & Products & Cart
--=============================

create table cart(
    cart_id UUID PRIMARY KEY,
    customer_id UUID NOT NULL REFERENCES customers(customer_id) ON DELETE CASCADE,
    created_at timestamptz NOT NULL DEFAULT NOW(),
    updated_at timestamptz NOT NULL DEFAULT NOW(),
    CONSTRAINT uq_cart_customer UNIQUE (customer_id)
);

create table categories(
    category_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name citext NOT NULL UNIQUE,
    category_description text NOT NULL
);

create table products(
    product_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_name varchar(200) NOT NULL,
    product_description varchar(255) NOT NULL,
    product_details JSONB NOT NULL,
    product_available_stock INT NOT NULL,
    product_price DECIMAL(14,2) NOT NULL,
    created_at timestamptz NOT NULL DEFAULT NOW(),
    updated_at timestamptz NOT NULL DEFAULT NOW(),
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    CONSTRAINT chk_products_stock_noneg check(product_available_stock >= 0),
    CONSTRAINT chk_products_price_positive check(product_price > 0),
    CONSTRAINT chk_products_details_is_object check (jsonb_typeof(product_details) = 'object')
);

create table product_category(
    product_category_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT NOT NULL REFERENCES products(product_id) ON DELETE CASCADE,
    category_id BIGINT NOT NULL REFERENCES categories(category_id) ON DELETE CASCADE,
    CONSTRAINT uq_product_category UNIQUE (product_id, category_id)
);

--- CREATE INDEX IF NOT EXISTS idx_product_categories_category_product
--- ON product_categories (category_id, product_id); We could utilize this in the future if we want to have some optimization

create table cart_item(
    cart_item_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cart_id UUID NOT NULL REFERENCES cart(cart_id) ON DELETE CASCADE,
    product_id BIGINT NOT NULL REFERENCES products(product_id) ON DELETE CASCADE,
    product_name varchar(200) NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    price_at DECIMAL(14,2) NOT NULL,
    added_at timestamptz NOT NULL DEFAULT NOW(),
    CONSTRAINT chk_cart_item_qty_positive check (quantity > 0),
    CONSTRAINT chk_cart_item_price_noneg check (price_at >= 0)
);

-- Extra constraint to enforce one item per cart (so only the quantity should be increasing)
CREATE UNIQUE INDEX ux_cart_item_unique ON cart_item(cart_id, product_id);

--===================================
--     Orders & Transactions
--===================================

create table orders(
    order_id UUID NOT NULL PRIMARY KEY,
    customer_id UUID NOT NULL REFERENCES customers(customer_id) ON DELETE CASCADE,
    total_outstanding DECIMAL(14,2) NOT NULL CHECK (total_outstanding > 0),
    address_to_send JSONB NOT NULL,
    order_status order_status NOT NULL DEFAULT 'PENDING_PAYMENT',
    order_created_at timestamptz NOT NULL DEFAULT NOW(),
    order_completed_at timestamptz
);

create table order_item(
    order_item_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id UUID NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE,
    product_id BIGINT NOT NULL REFERENCES products(product_id) ON DELETE CASCADE,
    product_name VARCHAR(200) NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    price_at DECIMAL(14,2) NOT NULL,
    snap_shot_at timestamptz NOT NULL DEFAULT NOW()
);

create table transactions(
    transaction_id UUID PRIMARY KEY,
    order_id UUID NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE,
    customer_id_snapshot VARCHAR(36) NOT NULL,
    CONSTRAINT chk_transactions_customer_uuid
        CHECK (customer_id_snapshot ~* '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'),
    payment_method JSONB NOT NULL,
    total_outstanding DECIMAL(14,2) NOT NULL CHECK(total_outstanding >= 0),
    submitted_at timestamptz NOT NULL DEFAULT NOW(),
    completed_at timestamptz,
    status transaction_status NOT NULL DEFAULT 'PENDING',
    idempotency_key varchar (100),
    provider_reference varchar(100),
    CONSTRAINT uq_transactions_idem UNIQUE (idempotency_key)
);

--===================================
--        Auditing & Logs
--===================================

create table auditing(
    log_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz NOT NULL DEFAULT NOW(),
    customer_id UUID,
    method_name VARCHAR(100) NOT NULL,
    status auditing_status,
    message TEXT NOT NULL
);

--====================================
--            Extras
--====================================
create table wishlist(
    wishlist_id UUID PRIMARY KEY,
    customer_id UUID NOT NULL REFERENCES customers(customer_id) ON DELETE CASCADE,
    created_at timestamptz NOT NULL DEFAULT NOW(),
    updated_at timestamptz NOT NULL DEFAULT NOW(),
    CONSTRAINT uq_customer_wishlist UNIQUE (customer_id)
);

create table wishlist_item(
    wish_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    wishlist_id UUID NOT NULL REFERENCES wishlist(wishlist_id) ON DELETE CASCADE,
    product_id BIGINT NOT NULL REFERENCES products(product_id) ON DELETE CASCADE,
    product_name varchar(200) NOT NULL,
    added_at timestamptz NOT NULL DEFAULT NOW(),
    CONSTRAINT uq_wishlist_product UNIQUE (wishlist_id, product_id);
);

create table emails_sent(
    email_id UUID PRIMARY KEY,
    customer_id UUID,
    order_id UUID,
    payment_id UUID,
    customer_name varchar(100),
    to_email CITEXT NOT NULL,
    status email_status NOT NULL default 'QUEUED',
    type email_kind NOT NULL,
    subject TEXT NOT NULL,
    email_text TEXT NOT NULL,
    created_at timestamptz NOT NULL DEFAULT NOW(),
    sent_at timestamptz
);
